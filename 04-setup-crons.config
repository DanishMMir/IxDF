files:
  "/etc/cron.d/xxxx-cron":
    mode: "000644"
    owner: root
    group: root
    content: |
      * * * * * root /usr/local/bin/xxxx-cron.sh
      1,31 * * * * root /usr/local/bin/xxxx-cron1.sh
      10,25,40,55 * * * * root /usr/local/bin/xxxx-cron2.sh
      30 3,9,15,21 * * * root /usr/local/bin/xxxx-cron3.sh
      59 * * * * root /usr/local/bin/xxxx-cron4.sh
      0 3 * * * root /usr/local/bin/xxxx-cron5.sh
      0 6 * * * root /usr/local/bin/xxxx-cron6.sh

  # Primary cron for application
  "/usr/local/bin/xxxx-cron.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      php artisan schedule:run

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron1.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron1 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      php artisan xxx:import

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron2.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron2 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      php artisan xxxxxxxx:import

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron3.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron3 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      php artisan xxxxyyyyy:import

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron4.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron4 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      scripts/xxxxxxx.sh

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron5.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron5 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      scripts/xxxxxxxss.sh

  # Secondary cron for application
  "/usr/local/bin/xxxx-cron6.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      /usr/local/bin/should-xxxx-cron-run.sh || exit
      echo "xxxx cron6 running on above instance Id at " `date` >> /tmp/xxxx-cron.log
      # Now do tasks that should only run on 1 instance ...
      python3 scripts/python/doc/xxxxxxxxx.py

  # Allow all above cron tasks to be run only on first in-service instance in current auto scaling group
  "/usr/local/bin/should-xxxx-cron-run.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      METADATA=/opt/aws/bin/ec2-metadata
      INSTANCE_ID=`$METADATA -i | awk '{print $2}'`
      REGION=`$METADATA -z | awk '{print substr($2, 0, length($2)-1)}'`
      echo "Checking instance-id " $INSTANCE_ID " at " `date` " for cron eligibility. Eligible if followed by \"xxxx cron running at...\"" >> /tmp/xxxx-cron.log

      # Find our Auto Scaling Group name.
      ASG=`aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" \
        --region $REGION --output text | awk '/aws:autoscaling:groupName/ {print $5}'`

      # Find the first instance in the Group
      FIRST=`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG \
        --region $REGION --output text | awk '/InService/ {print $4}' | sort | head -1`

      # Test if they're the same.
      if [ "$FIRST" = "$INSTANCE_ID" ]; then
        echo "Instance "$INSTANCE_ID" eligible to run cron jobs" >> /tmp/xxxx-cron.log
        [ "$FIRST" = "$INSTANCE_ID" ]
      else
        echo "Instance "$INSTANCE_ID" NOT eligible to run cron jobs" >> /tmp/xxxx-cron.log
        [ "$FIRST" = "$INSTANCE_ID" ]
      fi

# Remove old cron file on subsequent deployments to avoid multiple cron instances
commands:
  rm_old_cron:
    command: "rm *.bak"
    cwd: "/etc/cron.d"
    ignoreErrors: true
